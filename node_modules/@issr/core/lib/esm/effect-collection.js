import { __awaiter } from "tslib";
import { Statuses } from './effect';
export class EffectCollection {
    constructor() {
        this.addEffect = (effect) => {
            this.effects.set(effect.getId(), effect);
        };
        this.hasEffect = (effectId) => Boolean(this.effects.get(effectId));
        this.getEffects = () => Array.from(this.effects.values());
        this.getEffect = (effectId) => this.effects.get(effectId);
        this.getWaited = () => {
            const effects = this.getEffects();
            return effects.filter((effect) => effect.getStatus() === Statuses.wait);
        };
        this.runEffects = () => __awaiter(this, void 0, void 0, function* () {
            const waited = this.getWaited();
            if (waited.length > 0) {
                const results = yield Promise.allSettled(waited.map((effect) => effect.getCallback()));
                results.forEach((result, num) => {
                    const effect = waited[num];
                    if (result.status === 'fulfilled') {
                        if (effect) {
                            effect.done();
                        }
                    }
                    if (result.status === 'rejected') {
                        if (effect) {
                            effect.failed();
                        }
                    }
                });
            }
        });
        this.effects = new Map();
    }
}
//# sourceMappingURL=effect-collection.js.map