import { __awaiter } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
/**
 * @jest-environment node
 */
import { shallow } from 'enzyme';
import { useSsrEffect, useSsrState, useRegisterEffect } from './hooks';
import { createSsr } from './i-ssr';
describe('hooks tests', () => {
    test('useRegisterEffect - check effects registration', () => __awaiter(void 0, void 0, void 0, function* () {
        const SSR = createSsr();
        let called = false;
        const promisedFn = () => new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, 500);
        });
        const App = () => {
            const registerEffect = useRegisterEffect('effect-0');
            useSsrEffect(() => {
                registerEffect(promisedFn).then(() => {
                    called = true;
                });
            }, [], 'use-effect-0');
            return null;
        };
        shallow(_jsx(SSR, { children: _jsx(App, {}, void 0) }, void 0)).html();
        yield SSR.effectCollection.runEffects();
        expect(called).toBe(true);
    }));
    test('useRegisterEffect - check params', () => __awaiter(void 0, void 0, void 0, function* () {
        const SSR = createSsr();
        let result = '';
        const promisedFn = (foo, bar) => new Promise((resolve) => {
            setTimeout(() => {
                resolve(foo + bar);
            }, 500);
        });
        const App = () => {
            const registerEffect = useRegisterEffect('effect-0');
            useSsrEffect(() => {
                registerEffect(promisedFn, 'foo', ' bar').then((res) => {
                    result = res;
                });
            }, [], 'use-effect-0');
            return null;
        };
        shallow(_jsx(SSR, { children: _jsx(App, {}, void 0) }, void 0)).html();
        yield SSR.effectCollection.runEffects();
        expect(result).toBe('foo bar');
    }));
    test('useSsrEffect - Basic load on ready', () => __awaiter(void 0, void 0, void 0, function* () {
        const SSR = createSsr();
        let called = false;
        const promisedFn = () => new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, 500);
        });
        const App = () => {
            const registerEffect = useRegisterEffect('effect-0');
            useSsrEffect(() => {
                registerEffect(promisedFn).then(() => {
                    called = true;
                });
            }, [], 'use-effect-0');
            return null;
        };
        shallow(_jsx(SSR, { children: _jsx(App, {}, void 0) }, void 0)).html();
        yield SSR.effectCollection.runEffects();
        expect(called).toBe(true);
    }));
    test('useSsrState - Load state by source', () => __awaiter(void 0, void 0, void 0, function* () {
        const SSR = createSsr({
            'custom-id': 'bar',
        });
        const App = () => {
            const [state] = useSsrState('', 'custom-id');
            return _jsx("div", { children: state }, void 0);
        };
        const result = shallow(_jsx(SSR, { children: _jsx(App, {}, void 0) }, void 0)).html();
        expect(result).toBe('<div>bar</div>');
    }));
    test('useSsrState - use setState isomorphic', () => __awaiter(void 0, void 0, void 0, function* () {
        const SSR = createSsr();
        const App = () => {
            const [state, setState] = useSsrState('', 'state-0');
            const registerEffect = useRegisterEffect('effect-0');
            const promisedFn = () => new Promise((resolve) => {
                setTimeout(() => {
                    resolve('async bar');
                }, 500);
            });
            useSsrEffect(() => {
                registerEffect(promisedFn).then((asyncBar) => {
                    setState(asyncBar);
                });
            }, [], 'use-effect-0');
            return _jsx("div", { children: state }, void 0);
        };
        shallow(_jsx(SSR, { children: _jsx(App, {}, void 0) }, void 0)).html();
        yield SSR.effectCollection.runEffects();
        const state = SSR.getState();
        const key = Object.keys(state)[0];
        expect(state).toStrictEqual({ [key]: 'async bar' });
    }));
    test('useSsrState - boolean', () => __awaiter(void 0, void 0, void 0, function* () {
        const SSR = createSsr({
            'state-0': true,
        });
        const App = () => {
            const [state, setState] = useSsrState(true, 'state-0');
            const registerEffect = useRegisterEffect('effect-0');
            const asyncState = () => new Promise((resolve) => {
                setTimeout(() => {
                    resolve(false);
                }, 300);
            });
            useSsrEffect(() => {
                registerEffect(asyncState).then((s) => {
                    setState(s);
                });
            }, 'use-effect-0');
            return _jsx("div", { children: JSON.stringify(state) }, void 0);
        };
        shallow(_jsx(SSR, { children: _jsx(App, {}, void 0) }, void 0)).html();
        yield SSR.effectCollection.runEffects();
        const state = SSR.getState();
        const key = Object.keys(state)[0];
        expect(state).toStrictEqual({ [key]: false });
    }));
});
//# sourceMappingURL=hooks.spec.js.map