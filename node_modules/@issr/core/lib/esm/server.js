import { __awaiter } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import ReactDOMServer from 'react-dom/server';
import { createSsr } from './i-ssr';
export const serverRender = {
    stream: (iteration, opts) => __awaiter(void 0, void 0, void 0, function* () {
        if (typeof ReactDOMServer.renderToPipeableStream === 'undefined') {
            throw new Error('Streaming is available only on React 18 or more');
        }
        const SSR = createSsr(opts === null || opts === void 0 ? void 0 : opts.cachedState);
        const renderStream = (App) => ReactDOMServer.renderToPipeableStream(_jsx(SSR, { children: App }, void 0), typeof (opts === null || opts === void 0 ? void 0 : opts.streamOptionsFn) === 'function' ? opts === null || opts === void 0 ? void 0 : opts.streamOptionsFn(SSR.getState()) : opts === null || opts === void 0 ? void 0 : opts.streamOptions);
        const renderNested = () => __awaiter(void 0, void 0, void 0, function* () {
            const App = yield iteration();
            ReactDOMServer.renderToString(_jsx(SSR, { children: App }, void 0));
            const waited = SSR.effectCollection.getWaited();
            if (typeof (opts === null || opts === void 0 ? void 0 : opts.outsideEffects) === 'function') {
                yield opts.outsideEffects();
                if (waited.length === 0) {
                    return renderStream(App);
                }
            }
            if (waited.length === 0) {
                return renderStream(App);
            }
            if (waited.length > 0) {
                yield SSR.effectCollection.runEffects();
                return yield renderNested();
            }
            return renderStream(App);
        });
        const stream = yield renderNested();
        return {
            state: SSR.getState(),
            stream,
        };
    }),
    string: (iteration, opts) => __awaiter(void 0, void 0, void 0, function* () {
        const SSR = createSsr(opts === null || opts === void 0 ? void 0 : opts.cachedState);
        const renderNested = () => __awaiter(void 0, void 0, void 0, function* () {
            const App = yield iteration();
            const _html = ReactDOMServer.renderToString(_jsx(SSR, { children: App }, void 0));
            const waited = SSR.effectCollection.getWaited();
            if (typeof (opts === null || opts === void 0 ? void 0 : opts.outsideEffects) === 'function') {
                yield opts.outsideEffects();
                if (waited.length === 0) {
                    return ReactDOMServer.renderToString(_jsx(SSR, { children: App }, void 0));
                }
            }
            if (waited.length === 0) {
                return _html;
            }
            if (waited.length > 0) {
                yield SSR.effectCollection.runEffects();
                return yield renderNested();
            }
            return _html;
        });
        const html = yield renderNested();
        return {
            html,
            state: SSR.getState(),
        };
    }),
};
//# sourceMappingURL=server.js.map