import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { createContext, useEffect, isValidElement } from 'react';
import { EffectCollection } from './effect-collection';
import { isBackend, clone } from './utils';
export const IssrContext = createContext({});
export const ExcludeSsr = ({ children }) => {
    if (isBackend()) {
        return null;
    }
    if (isValidElement(children)) {
        return children;
    }
    if (typeof children === 'function') {
        return children();
    }
    return null;
};
const OnComplete = ({ loading, onLoad }) => {
    useEffect(() => {
        if (!isBackend() && loading) {
            setTimeout(() => onLoad(false));
        }
    }, []);
    return null;
};
export const createSsr = (initState = {}, options = {}) => {
    const app = {
        calledState: {},
        loading: options.onlyClient ? false : !isBackend(),
        state: initState,
    };
    const setEffectCalledState = (id) => {
        if (!app.calledState[id]) {
            app.calledState[id] = true;
        }
    };
    const getEffectCalledState = (id) => {
        return Boolean(app.calledState[id]);
    };
    const effectCollection = new EffectCollection();
    const onLoad = (state) => {
        app.loading = state;
    };
    const isLoading = () => app.loading;
    const getState = () => clone(app.state);
    const iSSR = ({ children }) => (_jsxs(IssrContext.Provider, Object.assign({ value: {
            effectCollection,
            getEffectCalledState,
            getState,
            initState,
            isLoading,
            setEffectCalledState,
        } }, { children: [children, _jsx(OnComplete, { loading: app.loading, onLoad: onLoad }, void 0)] }), void 0));
    iSSR.getState = getState;
    iSSR.effectCollection = effectCollection;
    return iSSR;
};
//# sourceMappingURL=i-ssr.js.map