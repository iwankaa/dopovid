"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
/**
 * @jest-environment node
 */
var enzyme_1 = require("enzyme");
var hooks_1 = require("./hooks");
var i_ssr_1 = require("./i-ssr");
describe('hooks tests', function () {
    test('useRegisterEffect - check effects registration', function () { return __awaiter(void 0, void 0, void 0, function () {
        var SSR, called, promisedFn, App;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    SSR = (0, i_ssr_1.createSsr)();
                    called = false;
                    promisedFn = function () {
                        return new Promise(function (resolve) {
                            setTimeout(function () {
                                resolve();
                            }, 500);
                        });
                    };
                    App = function () {
                        var registerEffect = (0, hooks_1.useRegisterEffect)('effect-0');
                        (0, hooks_1.useSsrEffect)(function () {
                            registerEffect(promisedFn).then(function () {
                                called = true;
                            });
                        }, [], 'use-effect-0');
                        return null;
                    };
                    (0, enzyme_1.shallow)((0, jsx_runtime_1.jsx)(SSR, { children: (0, jsx_runtime_1.jsx)(App, {}, void 0) }, void 0)).html();
                    return [4 /*yield*/, SSR.effectCollection.runEffects()];
                case 1:
                    _a.sent();
                    expect(called).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
    test('useRegisterEffect - check params', function () { return __awaiter(void 0, void 0, void 0, function () {
        var SSR, result, promisedFn, App;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    SSR = (0, i_ssr_1.createSsr)();
                    result = '';
                    promisedFn = function (foo, bar) {
                        return new Promise(function (resolve) {
                            setTimeout(function () {
                                resolve(foo + bar);
                            }, 500);
                        });
                    };
                    App = function () {
                        var registerEffect = (0, hooks_1.useRegisterEffect)('effect-0');
                        (0, hooks_1.useSsrEffect)(function () {
                            registerEffect(promisedFn, 'foo', ' bar').then(function (res) {
                                result = res;
                            });
                        }, [], 'use-effect-0');
                        return null;
                    };
                    (0, enzyme_1.shallow)((0, jsx_runtime_1.jsx)(SSR, { children: (0, jsx_runtime_1.jsx)(App, {}, void 0) }, void 0)).html();
                    return [4 /*yield*/, SSR.effectCollection.runEffects()];
                case 1:
                    _a.sent();
                    expect(result).toBe('foo bar');
                    return [2 /*return*/];
            }
        });
    }); });
    test('useSsrEffect - Basic load on ready', function () { return __awaiter(void 0, void 0, void 0, function () {
        var SSR, called, promisedFn, App;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    SSR = (0, i_ssr_1.createSsr)();
                    called = false;
                    promisedFn = function () {
                        return new Promise(function (resolve) {
                            setTimeout(function () {
                                resolve();
                            }, 500);
                        });
                    };
                    App = function () {
                        var registerEffect = (0, hooks_1.useRegisterEffect)('effect-0');
                        (0, hooks_1.useSsrEffect)(function () {
                            registerEffect(promisedFn).then(function () {
                                called = true;
                            });
                        }, [], 'use-effect-0');
                        return null;
                    };
                    (0, enzyme_1.shallow)((0, jsx_runtime_1.jsx)(SSR, { children: (0, jsx_runtime_1.jsx)(App, {}, void 0) }, void 0)).html();
                    return [4 /*yield*/, SSR.effectCollection.runEffects()];
                case 1:
                    _a.sent();
                    expect(called).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
    test('useSsrState - Load state by source', function () { return __awaiter(void 0, void 0, void 0, function () {
        var SSR, App, result;
        return __generator(this, function (_a) {
            SSR = (0, i_ssr_1.createSsr)({
                'custom-id': 'bar',
            });
            App = function () {
                var state = (0, hooks_1.useSsrState)('', 'custom-id')[0];
                return (0, jsx_runtime_1.jsx)("div", { children: state }, void 0);
            };
            result = (0, enzyme_1.shallow)((0, jsx_runtime_1.jsx)(SSR, { children: (0, jsx_runtime_1.jsx)(App, {}, void 0) }, void 0)).html();
            expect(result).toBe('<div>bar</div>');
            return [2 /*return*/];
        });
    }); });
    test('useSsrState - use setState isomorphic', function () { return __awaiter(void 0, void 0, void 0, function () {
        var SSR, App, state, key;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    SSR = (0, i_ssr_1.createSsr)();
                    App = function () {
                        var _a = (0, hooks_1.useSsrState)('', 'state-0'), state = _a[0], setState = _a[1];
                        var registerEffect = (0, hooks_1.useRegisterEffect)('effect-0');
                        var promisedFn = function () {
                            return new Promise(function (resolve) {
                                setTimeout(function () {
                                    resolve('async bar');
                                }, 500);
                            });
                        };
                        (0, hooks_1.useSsrEffect)(function () {
                            registerEffect(promisedFn).then(function (asyncBar) {
                                setState(asyncBar);
                            });
                        }, [], 'use-effect-0');
                        return (0, jsx_runtime_1.jsx)("div", { children: state }, void 0);
                    };
                    (0, enzyme_1.shallow)((0, jsx_runtime_1.jsx)(SSR, { children: (0, jsx_runtime_1.jsx)(App, {}, void 0) }, void 0)).html();
                    return [4 /*yield*/, SSR.effectCollection.runEffects()];
                case 1:
                    _b.sent();
                    state = SSR.getState();
                    key = Object.keys(state)[0];
                    expect(state).toStrictEqual((_a = {}, _a[key] = 'async bar', _a));
                    return [2 /*return*/];
            }
        });
    }); });
    test('useSsrState - boolean', function () { return __awaiter(void 0, void 0, void 0, function () {
        var SSR, App, state, key;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    SSR = (0, i_ssr_1.createSsr)({
                        'state-0': true,
                    });
                    App = function () {
                        var _a = (0, hooks_1.useSsrState)(true, 'state-0'), state = _a[0], setState = _a[1];
                        var registerEffect = (0, hooks_1.useRegisterEffect)('effect-0');
                        var asyncState = function () {
                            return new Promise(function (resolve) {
                                setTimeout(function () {
                                    resolve(false);
                                }, 300);
                            });
                        };
                        (0, hooks_1.useSsrEffect)(function () {
                            registerEffect(asyncState).then(function (s) {
                                setState(s);
                            });
                        }, 'use-effect-0');
                        return (0, jsx_runtime_1.jsx)("div", { children: JSON.stringify(state) }, void 0);
                    };
                    (0, enzyme_1.shallow)((0, jsx_runtime_1.jsx)(SSR, { children: (0, jsx_runtime_1.jsx)(App, {}, void 0) }, void 0)).html();
                    return [4 /*yield*/, SSR.effectCollection.runEffects()];
                case 1:
                    _b.sent();
                    state = SSR.getState();
                    key = Object.keys(state)[0];
                    expect(state).toStrictEqual((_a = {}, _a[key] = false, _a));
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=hooks.spec.js.map