"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRegisterEffect = exports.useSsrEffect = exports.useSsrState = void 0;
var react_1 = require("react");
var effect_1 = require("./effect");
var i_ssr_1 = require("./i-ssr");
var utils_1 = require("./utils");
var useSsrState = function (initialState, id) {
    if (typeof id !== 'string') {
        throw new Error('"useSsrState" hook: id is not a string. iSSR required @issr/babel-loader. You can follow official documentation to setup your build system https://github.com/AlexSergey/issr#usage');
    }
    var initState = (0, react_1.useContext)(i_ssr_1.IssrContext).initState;
    var appStateFragment = (0, react_1.useMemo)(function () { return (typeof initState[id] === 'undefined' ? initialState : initState[id]); }, [initState, id, initialState]);
    var _a = (0, react_1.useState)(appStateFragment), state = _a[0], setState = _a[1];
    var modifiedSetState = (0, react_1.useCallback)(function (innerState) {
        var s = innerState instanceof Function ? innerState(initState[id]) : innerState;
        initState[id] = s;
        setState(s);
    }, []);
    (0, react_1.useEffect)(function () { return function () {
        // Clear Global state when component was unmounted
        initState[id] = undefined;
        delete initState[id];
    }; }, []);
    return [state, modifiedSetState];
};
exports.useSsrState = useSsrState;
var useSsrEffect = function (effect, deps, id) {
    // eslint-disable-next-line no-nested-ternary
    var effectId = Array.isArray(deps) ? id : typeof deps === 'string' ? deps : false;
    if (typeof effectId !== 'string') {
        throw new Error('"useSsrEffect" hook: id is not a string. iSSR required @issr/babel-loader. You can follow official documentation to setup your build system https://github.com/AlexSergey/issr#usage');
    }
    var initHook = (0, react_1.useRef)(true);
    var cb = (0, react_1.useRef)(effect);
    var _a = (0, react_1.useContext)(i_ssr_1.IssrContext), isLoading = _a.isLoading, setEffectCalledState = _a.setEffectCalledState, getEffectCalledState = _a.getEffectCalledState;
    var isCalled = getEffectCalledState(effectId);
    var loading = isLoading();
    var isClient = !(0, utils_1.isBackend)();
    var firstLoadingOnTheClient = isClient && loading && initHook.current;
    var firstLoadingOnTheBackend = (0, utils_1.isBackend)() && initHook.current && !isCalled;
    initHook.current = false;
    var allDeps = Array.isArray(deps) ? deps : [];
    (0, react_1.useEffect)(function () {
        cb.current = effect;
    }, [effect]);
    // Effect on the backend side must run synchronously
    if (firstLoadingOnTheBackend) {
        effect();
        setEffectCalledState(effectId);
    }
    (0, react_1.useEffect)(function () {
        // First call after hydration must be skipped on the client side
        if (firstLoadingOnTheClient) {
            return;
        }
        // Already called in the backend side
        if (firstLoadingOnTheBackend) {
            return;
        }
        if (typeof cb.current === 'function') {
            // eslint-disable-next-line consistent-return
            return cb.current();
        }
    }, allDeps.concat([firstLoadingOnTheBackend, firstLoadingOnTheClient]));
};
exports.useSsrEffect = useSsrEffect;
var useRegisterEffect = function (id) {
    if (typeof id !== 'string') {
        throw new Error('"useRegisterEffect" hook: id is not a string. iSSR required @issr/babel-loader. You can follow official documentation to setup your build system https://github.com/AlexSergey/issr#usage');
    }
    var effectCollection = (0, react_1.useContext)(i_ssr_1.IssrContext).effectCollection;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return function (cb) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var res = cb.apply(void 0, args);
        if (!effectCollection.getEffect(id)) {
            var effect = new effect_1.Effect({ id: id });
            effectCollection.addEffect(effect);
            if (res instanceof Promise) {
                effect.addCallback(res);
            }
        }
        return res;
    };
};
exports.useRegisterEffect = useRegisterEffect;
//# sourceMappingURL=hooks.js.map