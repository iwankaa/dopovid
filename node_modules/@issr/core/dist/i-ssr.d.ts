import { FunctionComponent } from 'react';
import { EffectCollection } from './effect-collection';
export interface IInitState {
    [key: string]: unknown;
}
export interface IState {
    [key: string]: unknown;
}
interface IOptions {
    onlyClient?: boolean;
}
interface IReturnCreateIssr<P> extends FunctionComponent<P> {
    getState: () => IState;
    effectCollection: EffectCollection;
}
interface IIssrContext {
    isLoading: () => boolean;
    initState: IInitState | Record<string, unknown>;
    effectCollection: EffectCollection;
    getState: () => IState;
    setEffectCalledState: (id: string) => void;
    getEffectCalledState: (id: string) => boolean;
}
declare type ExcludeFn = (...args: unknown[]) => JSX.Element;
export declare const IssrContext: import("react").Context<IIssrContext>;
export declare const ExcludeSsr: ({ children }: {
    children: JSX.Element | ExcludeFn;
}) => JSX.Element | null;
export declare const createSsr: (initState?: IInitState, options?: IOptions) => IReturnCreateIssr<{
    children: JSX.Element;
}>;
export {};
