import { RenderToPipeableStreamOptions, PipeableStream } from 'react-dom/server';
import { IInitState } from './i-ssr';
interface IState {
    [key: string]: unknown;
}
interface IServerRenderResultString {
    html: string;
    state: IState;
}
interface IServerRenderResultStream {
    stream: PipeableStream;
    state: IState;
}
interface IServerRenderOptions<T> {
    cachedState?: IInitState;
    outsideEffects?: T;
    streamOptions?: RenderToPipeableStreamOptions;
    streamOptionsFn?: (state: IState) => RenderToPipeableStreamOptions;
}
export declare const serverRender: {
    stream: <T extends Function>(iteration: (count?: number | undefined) => JSX.Element, opts?: IServerRenderOptions<T> | undefined) => Promise<IServerRenderResultStream>;
    string: <T_1 extends Function>(iteration: (count?: number | undefined) => JSX.Element, opts?: IServerRenderOptions<T_1> | undefined) => Promise<IServerRenderResultString>;
};
export {};
